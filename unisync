#/bin/bash
TPUT=/usr/bin/tput
UNISON=/usr/bin/unison
INOTIFYWAIT=/usr/bin/inotifywait

# conf
PRF=unisync.prf
SRC_DIR=/home/hobin/dev
IGNORES="^25/*|^26/*|^run/*|^build.mk/*|.unison*"
LOG_FILE=~/unison/unisync.log
PID_FILE=~/unison/unisync.pid

NAME=$(basename $0)
DESCRIPTION="Unison Inotify Synchronization"

# usage
USAGE="\
Usage: $NAME [options] ...\n\
Options:\n\
  -l, --logfile FILE        Set the log file.\n\
  -d, --daemon COMMAND      Run in daemon mode.\n\
                            Available commands: start|stop|restart|status\n\
  -p, --pidfile FILE        Set the pid file.\n\
  -h, --help                Print this message and exit.\n\
"

# options
OPTS=$(getopt -a -o l:d:p:h -l logfile:,daemon:,pidfile:,help -- "$@" 2>/dev/null)
[[ $? -ne 0 ]] && echo -e "$USAGE" && exit 0
eval set -- "${OPTS}"
while true; do
    case "$1" in
    -l|--logfile)
        LOG_FILE=$2
        shift
        ;;
    -d|--daemon)
        DAEMON=$2
        shift
        ;;
    -p|--pidfile)
        PID_FILE=$2
        shift
        ;;
    -h|--help)
        echo -e "$USAGE"
        exit 0
        ;;
    --)
        shift
        break
        ;;
    esac
    shift
done

# log functions
log_use_plymouth () {
    if [ "${loop:-n}" = y ]; then
        return 1
    fi
    plymouth --ping >/dev/null 2>&1
}

log_use_fancy_output () {
    TPUT=/usr/bin/tput
    EXPR=/usr/bin/expr
    if  [ -t 1 ] &&
        [ "x${TERM:-}" != "x" ] &&
        [ "x${TERM:-}" != "xdumb" ] &&
        [ -x $TPUT ] && [ -x $EXPR ] &&
        $TPUT hpa 60 >/dev/null 2>&1 &&
        $TPUT setaf 1 >/dev/null 2>&1
    then
        [ -z $FANCYTTY ] && FANCYTTY=1 || true
    else
        FANCYTTY=0
    fi
    case "$FANCYTTY" in
        1|Y|yes|true)   true;;
        *)              false;;
    esac
}

log_daemon_msg () {
    if [ -z "$1" ]; then
        return 1
    fi

    if log_use_fancy_output && $TPUT xenl >/dev/null 2>&1; then
        COLS=`$TPUT cols`
        if [ "$COLS" ] && [ "$COLS" -gt 6 ]; then
            COL=`$EXPR $COLS - 7`
        else
            COLS=80
            COL=73
        fi

        if log_use_plymouth; then
            # If plymouth is running, don't output anything at this time
            # to avoid buffering problems (LP: #752393)
            if [ -z "$LOG_DAEMON_MSG" ]; then
                LOG_DAEMON_MSG=$*
                return
            fi
        fi

        # We leave the cursor `hanging' about-to-wrap (see terminfo(5)
        # xenl, which is approximately right). That way if the script
        # prints anything then we will be on the next line and not
        # overwrite part of the message.

        # Previous versions of this code attempted to colour-code the
        # asterisk but this can't be done reliably because in practice
        # init scripts sometimes print messages even when they succeed
        # and we won't be able to reliably know where the colourful
        # asterisk ought to go.

        printf " * $*       " || true
        # Enough trailing spaces for ` [fail]' to fit in; if the message
        # is too long it wraps here rather than later, which is what we
        # want.
        $TPUT hpa `$EXPR $COLS - 1` || true
        printf ' ' || true
    else
        echo " * $@" || true
        COL=
    fi
}

log_begin_msg () {
    log_daemon_msg "$1"
}

log_end_msg () {
    if [ -z "$1" ]; then
        return 1
    fi

    if [ "$COL" ] && [ -x "$TPUT" ]; then
        # If plymouth is running, print previously stored output
        # to avoid buffering problems (LP: #752393)
        if log_use_plymouth; then
            if [ -n "$LOG_DAEMON_MSG" ]; then
                log_daemon_msg $LOG_DAEMON_MSG
                LOG_DAEMON_MSG=""
            fi
        fi

        printf "\r" || true
        $TPUT hpa $COL
        if [ "$1" -eq 0 ]; then
            echo "[ OK ]" || true
        else
            printf '[' || true
            $TPUT setaf 1 || true # red
            printf fail || true
            $TPUT op || true # normal
            echo ']' || true
        fi
    else
        if [ "$1" -eq 0 ]; then
            echo "   ...done." || true
        else
            echo "   ...fail!" || true
        fi
    fi
    return $1
}

# control functions
start_impl()
{
    # check running
    status_impl
    if [[ $? -eq 2 ]]; then
        return 0
    fi
    # start
    unisync_impl >> $LOG_FILE 2>&1 &
    # pid
    echo $! > $PID_FILE
    return 0
}

stop_impl()
{
    pkill -P "$(get_pid)" >/dev/null 2>&1
    return $?
}

status_impl()
{
    ps -p "$(get_pid)" >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        return 2
    else
        return 3
    fi
}

get_pid()
{
    cat $PID_FILE 2>/dev/null
}

get_status()
{
    case "$1" in
        0)
            echo "OK"
            ;;
        1)
            echo "fail"
            ;;
        2)
            echo "running"
            ;;
        3)
            echo "not running"
            ;;
        *)
            echo "<unknown>"
            ;;
    esac
}

# impl
unisync_impl()
{
    # is running
    if [[ $(ps -ef | grep -v grep | grep -c inotifywait) -gt 0 ]]; then
        echo inotifywait is running >&2
        return 1
    fi
    
    # init
    echo -e "Began: $(date)\nInotify: init"
    $UNISON $PRF
    echo -e "Ended: $(date)\n"

    # inotifywait
    $INOTIFYWAIT -mrq -e create,delete,modify,move $SRC_DIR | while read event; do
        path=$(echo $event | awk '{print $1}')
        path=${path/$SRC_DIR\//}
        file=$(echo $event | awk '{print $3}')
        
        if [[ $(echo "$path$file"|grep -c -E "$IGNORES") -gt 0 ]]; then
            log="Ignore file: $SRC_DIR/$path$file"
            if [[ -z $DAEMON ]]; then
                newline=1
                printf "%-$($TPUT cols)s\r" "$log"
            fi
            continue
        fi
        if [[ $newline -eq 1 ]]; then
            newline=0
            printf "\n"
        fi
        
        echo -e "Began: $(date)\nInotify: $event"
        $UNISON $PRF -path "$path$file"
        echo -e "Ended: $(date)\n"
    done
    return 0
}

# exec
case "$DAEMON" in
    start)
        log_begin_msg "Starting $DESCRIPTION server $NAME" || true
        start_impl
        log_end_msg $? || true
        ;;
    stop)
        log_begin_msg "Stopping $DESCRIPTION server $NAME" || true
        stop_impl
        log_end_msg $? || true
        ;;
    restart)
        log_begin_msg "Restarting $DESCRIPTION server $NAME" || true
        stop_impl
        sleep 1
        start_impl
        log_end_msg $? || true
        ;;
    status)
        status_impl
        log_daemon_msg "$NAME is $(get_status $?)" || true
        ;;
    "")
        # run in the foreground
        unisync_impl
        ;;
    *)
        echo -e "$USAGE"
        ;;
esac
