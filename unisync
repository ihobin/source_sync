#/bin/bash
TTY=$(tty)
UNISON=/usr/bin/unison
INOTIFYWAIT=/usr/bin/inotifywait

# conf
PRF=unisync.prf
SRC_DIR=/home/hobin/dev
IGNORES="^25/*|^26/*|^run/*|^build.mk/*|.unison*"
LOG_FILE=~/unison/unisync.log
PID_FILE=~/unison/unisync.pid


NAME=$(basename $0)
DESCRIPTION="Unison Inotify Synchronization"

# usage
USAGE="\
Usage: $NAME [options] ...\n\
Options:\n\
  -l, --logfile FILE        Set the log file.\n\
  -d, --daemon              Run in daemon mode.\n\
  -p, --pidfile FILE        Set the pid file.\n\
  -h, --help                Print this message and exit.\
"

# options
OPTS=$(getopt -a -o l:p:dh -l logfile:,logfile:,daemon,help -- "$@" 2>/dev/null)
[[ $? -ne 0 ]] && echo -e "$USAGE" && exit 0
eval set -- "${OPTS}"
while true; do
    case "$1" in
    -l|--logfile)
        LOG_FILE=$2
        shift
        ;;
    -d|--daemon)
        DAEMON=1
        ;;
    -h|--help)
        echo -e "$USAGE"
        exit 0
        ;;
    --)
        shift
        break
        ;;
    esac
    shift
done

unisync_impl()
{
    # is running
    if [[ $(ps -ef | grep -v grep | grep -c inotifywait) -gt 0 ]]; then
        echo inotifywait is running >&2
        return 1
    fi
    
    # init
    echo -e "Began: $(date)\nInotify: init"
    $UNISON $PRF
    echo -e "Ended: $(date)\n"

    # inotifywait
    $INOTIFYWAIT -mrq -e create,delete,modify,move $SRC_DIR | while read event; do
        path=$(echo $event | awk '{print $1}')
        path=${path/$SRC_DIR\//}
        file=$(echo $event | awk '{print $3}')
        
        if [[ $(echo "$path$file"|grep -c -E "$IGNORES") -ge 0 ]]; then
            log="Ignore file: $SRC_DIR/$path$file"
            if [[ $DAEMON -ne 1 ]]; then
                newline=1
                size=($(stty size -F $TTY))
                printf "%-${size[1]}s\r" "$log"
            fi
            continue
        fi
        if [[ $newline -eq 1 ]]; then
            newline=0
            printf "\n"
        fi
        
        echo -e "Began: $(date)\nInotify: $event"
        $UNISON $PRF -path "$path$file"
        echo -e "Ended: $(date)\n"
    done
    return 0
}

start_impl()
{
    # check running
    status_impl
    if [[ $? -eq 2 ]]; then
        return 2
    fi
    # start
    unisync_impl >> $LOG_FILE 2>&1 &
    # pid
    echo $! > $PID_FILE
    return 0
}

stop_impl()
{
    pkill -P "$(get_pid)" >/dev/null 2>&1
    return $?
}

status_impl()
{
    ps -p "$(get_pid)" >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        return 2
    else
        return 3
    fi
}

get_pid()
{
    cat $PID_FILE 2>/dev/null
}

get_status()
{
    case "$1" in
        0)
            echo "OK"
            ;;
        1)
            echo "failed"
            ;;
        2)
            echo "running"
            ;;
        3)
            echo "not running"
            ;;
        *)
            echo "<unknown>"
            ;;
    esac
}

if [[ $DAEMON -eq 1 ]]; then
    case "$1" in
        start)
            printf "Starting $DESCRIPTION server $NAME .. \r"
            sleep 1
            start_impl
            echo "Starting $DESCRIPTION server $NAME: $(get_status $?)"
            ;;
        stop)
            printf "Stopping $DESCRIPTION server $NAME .. \r"
            sleep 1
            stop_impl
            echo "Stopping $DESCRIPTION server $NAME: $(get_status $?)"
            ;;
        restart)
            printf "Restarting $DESCRIPTION server $NAME ...\r"
            stop_impl
            sleep 1
            start_impl
            echo "Restarting $DESCRIPTION server $NAME: $(get_status $?)"
            ;;
        status)
            status_impl
            echo "$NAME is $(get_status $?)"
            ;;
        *)
            echo "Usage: $NAME [options] start|stop|restart|status"
            ;;
    esac
else
    unisync_impl
fi
